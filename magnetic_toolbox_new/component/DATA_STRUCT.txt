% =================================================================================================
% Definition of the data format
% =================================================================================================
%
% =================================================================================================
% class definition
% =================================================================================================
%
% class = fct --- function handler (class) for the component type
%       @inductor_C_type --- inductor with a C-core
%       @inductor_E_type --- inductor with a E-core
%       @transformer_E_type --- transformer with a E-core (shell type windings)
%       @transformer_C_type --- transformer with a C-core (shell type windings)
%
% =================================================================================================
% core definition
% =================================================================================================
%
% core:
%       geom.t_core = double --- thickness of the core (one limb)
%       geom.z_core = double --- size of the core in the third dimension
%       geom.d_gap = double --- geometrical distance between the two half-cores
%       geom.r_window = double --- innder curvature radius of the winding head
%       geom.material = struct --- definition of the core material as specifield in the 'core' package
%
% =================================================================================================
% winding definition
% =================================================================================================
%
% generic winding:
%       winding_tmp.conductor = struct --- conductor data structure as specifield in the 'window' package 
%       winding_tmp.n_winding = row --- vector with the number of conductor per layer (magnetic number of turn is n_winding/n_par)
%       winding_tmp.n_par = integer --- number of parallel connected conductors (for losses and inductance computation) 
%       winding_tmp.t_layer = double --- insulation distance between the layers
%       winding_tmp.t_turn = double --- insulation distance between the conductors inside a layer
%       winding_tmp.t_core_x = double --- insulation distance between the winding and the core (height direction)
%       winding_tmp.t_core_y = double --- insulation distance between the winding and the core (width direction)
% 
% winding for inductor:
%       winding.winding = struct --- generic winding data structure
%       winding.d_window = double - width of the core window (NaN for minimum width)
%       winding.h_window = double - height of the core window (NaN for minimum width)
%       winding.n_mirror = integer --- number of the mirroring step for the field computation
%       winding.d_pole = double --- pole distance for the inductance computation of ill-formulated problem
%
% winding for transformer:
%       winding.winding.lv = struct --- generic winding data structure for the LV winding
%       winding.winding.hv = struct --- generic winding data structure for the HV winding
%       winding.t_winding_lv_hv = double --- insulation distance between the HV and LV windings
%       winding.type_winding = str --- placement of the HV and LV windings at the interior/exterior ('lv_hv' or 'lv_hv')
%       winding.d_window = double - width of the core window (NaN for minimum width)
%       winding.h_window = double - height of the core window (NaN for minimum width)
%       winding.n_mirror = integer --- number of the mirroring step for the field computation
%       winding.d_pole = double --- pole distance for the inductance computation of ill-formulated problem
%
% =================================================================================================
% stress definition
% =================================================================================================
%
% stress:
%       stress.core = struct --- definition of the core stress as specifield in the 'core' package
%       stress.window = struct --- definition of the window stress as specifield in the 'window' package
%
% =================================================================================================
% (c) 2021, T. Guillod, BSD License
% =================================================================================================